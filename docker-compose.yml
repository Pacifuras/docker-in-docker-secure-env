version: '3'
services:
  docker:
    # Starts a Docker daemon at the DNS name "docker"
    # Note:
    #  * This must be called "docker" to line up with the default
    #    TLS certificate name
    #  * DOCKER_TLS_CERTDIR defaults to "/certs
    image: docker:dind
    container_name: docker
    privileged: yes
    volumes:
      - ${PWD}/certs/client:/certs/client
      - ${PWD}/certs.d:/etc/docker/certs.d
    networks: 
      - net

  registry:
    # Starts a registry for local dev
    # To secure 
    image: registry:2
    container_name: registry
    restart: unless-stopped
    environment: 
      DOCKER_TLS_CERTDIR: /certs
      REGISTRY_HTTP_TLS_CERTIFICATE: /certs/registry.crt
      REGISTRY_HTTP_TLS_KEY: /certs/registry.pem
    volumes:
      - /data:/var/lib/registry
      - ${PWD}/certs:/certs
    networks: 
      - net
    depends_on: 
      - docker

  docker-client:
    # Provides a Docker client container, including the client
    # certs generated by the docker:dind container, above.
    # Notes:
    #  * The name of this container doesn't matter
    #  * The DOCKER_CERT_PATH defaults to /certs/client, the
    #    same path where the docker:dind image generates the
    #    client certificate (and that we've mounted inside this
    #    container).
    # You can execute a shell inside this container by running:
    #   docker-compose exec docker-client sh
    image: docker
    container_name: docker-client
    command: sh -c 'while [ 1 ]; do sleep 1000; done'
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_TLS_VERIFY: 1
      DOCKER_TLS_CERTDIR: /certs
      DOCKER_CERT_PATH: /certs/client
      REGISTRY_HTTP_TLS_CERTIFICATE: /certs/registry.crt
    volumes:
      - ${PWD}/certs/client:/certs/client/
      - ${PWD}/certs/registry.crt:/usr/local/share/ca-certificate/ca.crt
    networks: 
      - net
    depends_on: 
      - docker
      - registry
  

volumes:
  certs:

networks: 
  net:
    driver: bridge

